# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResult {
  access_token: String!
  expires_at: Int!
}

type BaseMovie {
  id: Int!
  adult: Boolean!
  backdrop_path: String
  genre_ids: [Int!]
  original_language: String!
  original_title: String!
  overview: String
  poster_path: String
  release_date: String
  title: String!
  hasVideo: Boolean
}

type Collection {
  id: Int!
  backdrop_path: String
  name: String!
  overview: String
  parts: [BaseMovie!]
  poster_path: String
}

type Identity {
  displayName: String
  id: String
}

type IdentitySet {
  application: Identity
  device: Identity
  user: Identity
}

type Quota {
  total: Int!
  used: Int!
  remaining: Int!
  deleted: Int!
  state: String!
}

type Settings {
  root_path: String
  movies_path: String
  public: Boolean
}

type SimpleDrive {
  id: String!
}

type Drive {
  id: String!
  createdDateTime: String!
  description: String!
  driveType: String!
  lastModifiedDateTime: String!
  name: String!
  owner: IdentitySet
  quota: Quota
  settings: Settings
}

type Genre {
  id: Int!
  name: String!
}

type Image {
  aspect_ratio: Float!
  file_path: String!
  height: Int!
  iso_639_1: String
  width: Int!
}

type Images {
  id: Int!
  backdrops(size: Int = 3): [Image!]!
  posters(size: Int = 1): [Image!]!
}

type File {
  mimeType: String!
}

type Folder {
  childCount: Int!
}

type Item {
  id: String!
  createdDateTime: String!
  file: File
  folder: Folder
  lastModifiedDateTime: String!
  name: String!
  size: Float!
  movie_id: Int
}

type Company {
  id: Int!
  logo_path: String
  name: String!
  origin_country: String!
}

type Country {
  iso_3166_1: String!
  name: String!
}

type Movie {
  id: Int!
  adult: Boolean!
  backdrop_path: String
  genre_ids: [Int!]
  original_language: String!
  original_title: String!
  overview: String
  poster_path: String
  release_date: String
  title: String!
  hasVideo: Boolean
  belongs_to_collection: Collection
  directors: [Person!]
  genres: [Genre!]!
  homepage: String
  images: Images
  imdb_id: String
  production_companies: [Company!]
  production_countries: [Country!]
  runtime: Int
  status: String
}

type Person {
  id: Int!
  also_known_as: [String!]
  birthday: String
  deathday: String
  imdb_id: String
  known_for_department: String
  name: String!
  place_of_birth: String
  profile_path: String
}

type Query {
  drivesPublic: [SimpleDrive!]!
  drives: [Drive!]!
  items(skip: Int = 0, limit: Int = 20, driveId: String!, folderPath: String = "", search: String, order: Order = ASC, orderBy: ItemsOrderBy = NAME): [Item!]!
  collection(id: Int!): Collection!
  genres: [Genre!]!
  movie(id: Int!): Movie!
  movies(skip: Int = 0, limit: Int = 20, search: String, genreIds: [Int!], genreFilterType: GenreFilterType = AND, order: Order = DESC, orderBy: MoviesOrderBy = RELEASE_DATE): [Movie!]!
  person(id: Int!): Person!
}

enum Order {
  DESC
  ASC
}

enum ItemsOrderBy {
  NAME
  LAST_MODIFIED_DATETIME
}

enum GenreFilterType {
  OR
  AND
}

enum MoviesOrderBy {
  RELEASE_DATE
}

type Mutation {
  authAdmin(password: String!, username: String!): AuthResult!
}
